kind: Namespace
apiVersion: v1
metadata:
  name: demo-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: demo-app
  name: postgres-config
data:
  PGDATA: /var/lib/postgresql/data/pgdata
---
apiVersion: v1
kind: Secret
metadata:
  namespace: demo-app
  name: postgres-credentials
data:
  # echo -n 'postgres' | base64
  # echo -n 'cG9zdGdyZXM=' | base64 -d
  user: cG9zdGdyZXM=
  # echo -n 'mysecretpassword' | base64
  # echo -n 'bXlzZWNyZXRwYXNzd29yZA==' | base64 -d
  password: bXlzZWNyZXRwYXNzd29yZA==
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: demo-app
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  serviceName: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: postgres
          image: docker.io/library/postgres:10.15-alpine
          envFrom:
            - configMapRef:
                name: postgres-config
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: user
            - name: POSTGRES_DB
              value: "workshopdb"
          ports:
            - containerPort: 5432
              name: postgredb
---
apiVersion: v1
kind: Service
metadata:
  namespace: demo-app
  name: service-postgres
  labels:
    app: database
spec:
  ports:
    - port: 5432
  selector:
    app: database
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: demo-app
  name: flask-backend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: smrcascao/runtime-demo-app:latest
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "2000m"
              memory: "1024Mi"
          env:
            - name: SERVICE_POSTGRES_SERVICE_HOST
              value: "service-postgres.demo-app.svc.cluster.local"
            - name: POSTGRES_DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: user
            - name: POSTGRES_DB_PSW
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: POSTGRES_DB_NAME
              value: "workshopdb"
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5000
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
        - name: beyla
          image: grafana/beyla:latest
          ports:
            - containerPort: 9100
            - containerPort: 8443
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "2000m"
              memory: "1024Mi"
          securityContext: # Privileges are required to install the eBPF probes
            runAsUser: 0
            capabilities:
              add:
                - SYS_ADMIN
          env:
            - name: OPEN_PORT # The internal port of the goblog application container
              value: "5000"
            # - name: OTEL_EXPORTER_OTLP_ENDPOINT
            #   value: "http://grafana-agent:4318"
            - name: BEYLA_PROMETHEUS_PORT
              value: "9100"
            - name: PROMETHEUS_PATH
              value: "/metrics"
            - name: SERVICE_NAME
              value: "flask-backend-deployment"
            - name: PRINT_TRACES
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  namespace: demo-app
  name: service-flask-backend
spec:
  ports:
    - port: 5000
      targetPort: 5000
      name: flask
    - port: 9100
      targetPort: 9100
      name: prometheus   
    - port: 8443
      targetPort: 8443
      name: otel
  selector:
    app: flask-app
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: demo-app
  name: ingress-nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - http:
      paths:
        - path: /app(.*)
          pathType: Prefix
          backend:
            service: 
              name: service-flask-backend
              port: 
                number: 5000
        - path: /(.*)
          pathType: Prefix
          backend:
            service: 
              name: service-flask-backend
              port: 
                number: 5000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: demo-app
  name: ingress-nginx
  annotations:
#    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
        - path: /demo-app(.*)
          pathType: Prefix
          backend:
            service: 
              name: service-flask-backend
              port: 
                number: 5000
        # - path: /(.*)
        #   pathType: Prefix
        #   backend:
        #     service: 
        #       name: service-flask-backend
        #       port: 
        #         number: 5000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: argocd
  name: ingress-argocd
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /argocd/$1
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
        - path: /argocd(.*)
          pathType: Prefix
          backend:
            service: 
              name: frontend-external
              port: 
                number: 80